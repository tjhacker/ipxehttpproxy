#!/bin/bash
# Minion start
#Purpose: Manage the status of the minion service on the system
#status is for overall availability of service, not for specific minion ports
#store status in /var/minion/service
#minon port X status in /var/minon/ports/X


#minionctl start  (start -> I-PR->I-A->I-LC)
#minionctl status (report value of /var/minion/service and all minion ports)
#minionctl restart (restore status to I-LC (somehow) )
#minionctl stop (revert to start state - nothing running)

# Syntax: start 
# Create minion port name PORT with VXlan ID N
OPTERR=1
MPORT=""
MPORT_ID=""
IPSEC_ADAPTER=""
REMOTE_IPSEC_ADDR=""
while getopts h option
do
   case "${option}" 
   in
   h) echo "Syntax: start"
   esac
done
   
export MINION_STATUS=/var/minion/service

mkdir -p `dirname $MINION_STATUS`

test -e {$MINION_STATUS}
if [[ $? == 1  ]]; then
 # Not there - intialize with status
 echo "Start" > $MINION_STATUS
else
 echo -n  "Existing minion status: " 
 cat {$MINION_STATUS}
fi

# start minion service

#might need to keep state in a file in /var/minion <- probably start here to keep complexity down until I know I need to use systemctl

#use minionctl to start with, can transition to systemctl someday if needed






# Verify prerequisites (I-PR) for minion ports      
 # what are prereqs ?
#  1. necessary packages installed 
#	strongswan openvswitch libibverbs policycoreutils-python openssl-devel pam-devel selinux-policy-devel duo_unix fail2ban 


rpm -q strongswan openvswitch libibverbs policycoreutils-python openssl-devel pam-devel selinux-policy-devel duo_unix fail2ban
if [[ $? != 0 ]]; then
  echo "Package(s) missing"
else
  echo "Required packages installed."
fi


#  2. necessary services started and running
#	strongswan openvswitch selinux firewall duo_unix fail2ban
if [[ `systemctl is-active strongswan openvswitch firewalld fail2ban  | egrep "(inactive|unknown)"` ]]; then
   echo "Systems not ready"
else
   echo "Required systems ready."
fi

  #3. configure and check firewall options 
 # How do I check this? - what needs to be checked? critical ports for ipsec and vxlan are ready..
        systemctl stop NetworkManager
	
    



    jzone=`firewall-cmd --get-active-zones | egrep "^juno$"`

    if [[ $jzone != "juno" ]]; then
       firewall-cmd --new-zone=juno --permanent
    fi
    firewall-cmd --reload 

#    firewall-cmd --zone=juno --change-interface=eth1

  firewall-cmd --add-interface=eth0 --zone=dmz --permanent
  firewall-cmd --add-service=ssh --zone=dmz --permanent # to be able to ssh into the system from vagrant


    firewall-cmd -q --zone=juno --query-port 3130/udp 
    if [[ $? != 0 ]]; then
        firewall-cmd --zone=juno --add-port 3130/udp --permanent
    fi

    firewall-cmd -q --query-masquerade --permanent
    if [[ $? != 0 ]]; then
        firewall-cmd --add-masquerade --permanent
    fi

    firewall-cmd -q --zone=dmz --permanent --query-rich-rule='rule protocol value="esp" accept'
   if [[ $? != 0 ]]; then
        firewall-cmd -q --zone=dmz --permanent --add-rich-rule='rule protocol value="esp" accept'
    fi

     firewall-cmd -q --zone=dmz --permanent --query-rich-rule='rule protocol value="ah" accept'
   if [[ $? != 0 ]]; then
     firewall-cmd -q --zone=dmz --permanent --add-rich-rule='rule protocol value="ah" accept'
    fi

     firewall-cmd -q --zone=dmz --permanent --query-port=500/udp
   if [[ $? != 0 ]]; then
        firewall-cmd -q --zone=dmz --permanent --add-port=500/udp
    fi

    firewall-cmd -q --zone=dmz --permanent --query-port=4500/udp
   if [[ $? != 0 ]]; then
        firewall-cmd -q --zone=dmz --permanent --add-port=4500/udp
    fi

     firewall-cmd -q --permanent --query-service="ipsec"
   if [[ $? != 0 ]]; then
        firewall-cmd -q --permanent --add-service="ipsec"
    fi

    firewall-cmd -q --permanent --query-port=8472/udp # vxlan port

   if [[ $? != 0 ]]; then
	firewall-cmd -q --permanent --add-port=8472/udp # vxlan port
    fi

    firewall-cmd -q --permanent --query-port=8472/udp --zone=dmz # vxlan port
   if [[ $? != 0 ]]; then
        firewall-cmd -q --permanent --add-port=8472/udp --zone=dmz # vxlan port
    fi

 firewall-cmd -q --query-interface=ovs-br1 --zone=juno --permanent
   if [[ $? != 0 ]]; then
	 firewall-cmd -q --add-interface=ovs-br1 --zone=juno --permanent
    fi

 firewall-cmd -q --query-source=192.7.7.0/24 --zone=juno --permanent

   if [[ $? != 0 ]]; then
	 firewall-cmd -q --add-source=192.7.7.0/24 --zone=juno --permanent
    fi
     systemctl start NetworkManager

     firewall-cmd --permanent --add-service=dhcp # allow L2 DHCP request thru vxlan
     firewall-cmd --permanent --add-service=tftp # allow L2 DHCP request thru vxlan
        firewall-cmd --zone=juno --add-service dns --permanent
        firewall-cmd --zone=juno --add-service squid --permanent
        firewall-cmd --zone=juno --add-port 3130/udp --permanent


firewall-cmd --reload


 echo "I-PR Prequiresites Verified" > $MINION_STATUS

# Check availability of IPsec peer server (unencrypted IP address)
ping -c 1 -w 4 moon
if [[ $? != 0 ]]; then
   echo "IPsec target unreachable."
else
 echo "I-A Peer Available" > $MINION_STATUS
fi


# Load strongswan configuration
swanctl --load-all      
if [[ $? == 0 ]]; then
 echo "I-LC Configuration Loaded" > $MINION_STATUS
fi


swanctl --log &

# Establish IPsec tunnel
# Check if we are in the correct state to create the IPsec link
cat $MINION_STATUS | grep "I-LC"
if [[ $? != 0  ]]; then
 echo "System not ready to create minion port."
 exit
fi

 echo "I-CA IPsec Connection Attempt" > $MINION_STATUS
# How to Get to I-TC?
swanctl -i -c host-host
if [[ $? != 0  ]]; then
 echo "Attempt to create IPsec tunnel failed."
 exit
fi

echo "I-TO IPsec Tunnel Open" > $MINION_STATUS
