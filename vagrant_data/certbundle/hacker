#!/bin/bash
# Minion start
#Purpose: Manage the status of the minion service on the system
#status is for overall availability of service, not for specific minion ports
#store status in /var/minion/service
#minon port X status in /var/minon/ports/X

#####
#!/bin/bash
# Syntax: createa -m minion-port-name -i ipsec-adapter-name -a remote-ipsec-address -v VXLAN-id
# Create minion port name PORT with VXlan ID N
#####
# Probably need a wrapper for this...
#minionctl start  (start -> I-PR->I-A->I-LC)
#minionctl status (report value of /var/minion/service and all minion ports)
#minionctl restart (restore status to I-LC (somehow) )
#minionctl stop (revert to start state - nothing running)

# Syntax: start 
# Create minion port name PORT with VXlan ID N
OPTERR=1
MPORT=""
MPORT_ID=""
IPSEC_ADAPTER=""
REMOTE_IPSEC_ADDR=""
while getopts h option
do
   case "${option}" 
   in
   h) echo "Syntax: start"
   esac
done
   
export MINION_STATUS=/var/minion/service

mkdir -p `dirname $MINION_STATUS`

test -e {$MINION_STATUS}
if [[ $? == 1  ]]; then
 # Not there - intialize with status
 echo "Start" > $MINION_STATUS
else
 echo -n  "Existing minion status: " 
 cat {$MINION_STATUS}
fi

# start minion service

#might need to keep state in a file in /var/minion <- probably start here to keep complexity down until I know I need to use systemctl

#use minionctl to start with, can transition to systemctl someday if needed






# Verify prerequisites (I-PR) for minion ports      
 # what are prereqs ?
#  1. necessary packages installed 
#	strongswan openvswitch libibverbs policycoreutils-python openssl-devel pam-devel selinux-policy-devel duo_unix fail2ban 


rpm -q strongswan openvswitch libibverbs policycoreutils-python openssl-devel pam-devel selinux-policy-devel duo_unix fail2ban
if [[ $? != 0 ]]; then
  echo "Package(s) missing. Installing required packages."
  yum -y install strongswan openvswitch libibverbs policycoreutils-python openssl-devel pam-devel selinux-policy-devel duo_unix fail2ban
else
  echo "Required packages installed."
fi



#  2. necessary services started and running
#	strongswan openvswitch selinux firewall duo_unix fail2ban
if [[ `systemctl is-active strongswan openvswitch firewalld fail2ban  | egrep "(inactive|unknown)"` ]]; then
   echo "Systems not ready. Starting necessary systems."
	systemctl enable lighttpd; systemctl start lighttpd
	systemctl enable squid; systemctl start squid
	systemctl enable strongswan; systemctl start strongswan
	systemctl enable openvswitch; systemctl start openvswitch
	systemctl enable fail2ban; systemctl start fail2ban
   
else
   echo "Required systems ready."
fi


  #3. configure and check firewall options 
 # How do I check this? - what needs to be checked? critical ports for ipsec and vxlan are ready..


    jzone=`firewall-cmd --get-active-zones | egrep "^juno$"`



	systemctl stop NetworkManager 

    if [[ $jzone != 'juno' ]]; then
       firewall-cmd --new-zone=juno --permanent 
    else
	echo "Zone Juno already defined."
    fi

	firewall-cmd --reload


    firewall-cmd -q --query-interface=eth0 --zone=dmz
    if [[ $? != 0 ]]; then
	firewall-cmd --add-interface=eth0 --zone=dmz --permanent
    fi


    firewall-cmd -q --query-service=ssh --zone=dmz
    if [[ $? != 0 ]]; then
	firewall-cmd --add-service=ssh --zone=dmz --permanent # to be able to ssh into the system from vagrant
    fi


    firewall-cmd -q --query-service=dhcp --zone=juno
    if [[ $? != 0 ]]; then
	firewall-cmd --zone=juno --add-service dhcp --permanent
    fi


    firewall-cmd -q --query-service=tftp --zone=juno
    if [[ $? != 0 ]]; then
	firewall-cmd --zone=juno --add-service tftp --permanent
    fi

    firewall-cmd -q --query-service=dns --zone=juno
    if [[ $? != 0 ]]; then
	firewall-cmd --zone=juno --add-service dns --permanent
    fi

    firewall-cmd -q --query-service=squid --zone=juno
    if [[ $? != 0 ]]; then
	firewall-cmd --zone=juno --add-service squid --permanent
    fi

    firewall-cmd -q --query-port=3130/udp --zone=juno
    if [[ $? != 0 ]]; then
	firewall-cmd --zone=juno --add-port 3130/udp --permanent
    fi

    firewall-cmd -q --query-masquerade
    if [[ $? != 0 ]]; then
	firewall-cmd --add-masquerade --permanent	
    fi

	firewall-cmd --reload
	systemctl start NetworkManager


    nmcli con show "System eth0" | grep ipv4.ignore-auto-dns 
    if [[ $? != 'yes' ]]; then
      nmcli con mod "System eth0" ipv4.ignore-auto-dns yes
    fi



	 nmcli con up "System eth0"
	nmcli general hostname apollo.load

 echo "I-PR Prequiresites Verified" > $MINION_STATUS

#	ip link add vxlan0 type vxlan id 21 dev eth2 dstport 8472
#
## Check availability of IPsec peer server (unencrypted IP address)
#ping -c 1 -w 4 moon
#if [[ $? != 0 ]]; then
#   echo "IPsec target unreachable."
#else
# echo "I-A Peer Available" > $MINION_STATUS
#fi
#
#         bridge fdb add 00:00:00:00:00:00 dst 192.100.88.10 dev vxlan0 # dst is remote ip sec IP addr
#        ip link set up vxlan0
#        systemctl enable openvswitch; systemctl start openvswitch
#        echo "export PATH=/usr/local/bin:/usr/share/openvswitch/scripts/:$PATH" >> /etc/bashrc
#        export PATH=/usr/local/bin:/usr/share/openvswitch/scripts/:$PATH
#        hash
#        ovs-ctl start
#         systemctl enable openvswitch; systemctl start openvswitch
#         ovs-vsctl add-br ovs-br1
#         	ovs-vsctl add-port ovs-br1 eth1
#         ovs-vsctl add-port ovs-br1 vxlan0
#	         ifconfig ovs-br1 192.7.7.10/24 ## debugging
#
## Firewall rules for IPsec and DHCP service
#	firewall-cmd --zone=dmz --permanent --add-rich-rule='rule protocol value="esp" accept'
#     firewall-cmd --zone=dmz --permanent --add-rich-rule='rule protocol value="ah" accept'
#     firewall-cmd --zone=dmz --permanent --add-port=500/udp
#     firewall-cmd --zone=dmz --permanent --add-port=4500/udp
#     firewall-cmd --permanent --add-service="ipsec"
#    firewall-cmd --permanent --add-port=8472/udp # vxlan port
#    firewall-cmd --permanent --add-port=8472/udp --zone=dmz # vxlan port
#     firewall-cmd --permanent --add-service=dhcp # allow L2 DHCP request thru vxlan
#     firewall-cmd --permanent --add-service=tftp # allow L2 DHCP request thru vxlan
#     firewall-cmd --list-all --zone=dmz
# firewall-cmd --add-interface=ovs-br1 --zone=juno --permanent
# firewall-cmd --add-source=192.7.7.0/24 --zone=juno --permanent
#firewall-cmd --reload
#     swanctl --load-all # Will wait from connection from outside.
#
#if [[ $? == 0 ]]; then
# echo "I-LC Configuration Loaded" > $MINION_STATUS
#fi
#
#
# echo "I-CA IPsec Connection Attempt" > $MINION_STATUS
#
#     swanctl -i -c host-host
#
#if [[ $? != 0  ]]; then
# echo "Attempt to create IPsec tunnel failed."
# exit
#fi
#echo "I-TO IPsec Tunnel Open" > $MINION_STATUS
#systemctl restart squid
